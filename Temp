Now read below API Responce ans solve this issue carefullu

http://localhost:3007/api/occupancy/history

{
  "success": true,
  "summaryByDate": [
    {
      "date": "2025-07-14",
      "day": "Monday",
      "region": {
        "name": "APAC",
        "total": 1105,
        "Employee": 938,
        "Contractor": 167
      },
      "partitions": {
        "undefined": {----------Partation are undefined solve this issue 
          "total": 1105,
          "Employee": 938,
          "Contractor": 167
        }
      }
    },
    {
      "date": "2025-07-15",
      "day": "Tuesday",
      "region": {
        "name": "APAC",
        "total": 1291,
        "Employee": 1129,
        "Contractor": 162
      },
      "partitions": {
        "undefined": {
          "total": 1291,
          "Employee": 1129,
          "Contractor": 162
        }
      }
    },
    {
      "date": "2025-07-16",
      "day": "Wednesday",
      "region": {
        "name": "APAC",
        "total": 1427,
        "Employee": 1257,
        "Contractor": 170
      },
      "partitions": {
        "undefined": {
          "total": 1427,
          "Employee": 1257,
          "Contractor": 170
        }
      }
    },
    {
      "date": "2025-07-17",
      "day": "Thursday",
      "region": {
        "name": "APAC",
        "total": 1041,
        "Employee": 903,
        "Contractor": 138
      },
      "partitions": {
        "undefined": {
          "total": 1041,
          "Employee": 903,
          "Contractor": 138
        }
      }
    },
    {
      "date": "2025-07-18",
      "day": "Friday",
      "region": {
        "name": "APAC",
        "total": 669,
        "Employee": 544,
        "Contractor": 125
      },
      "partitions": {
        "undefined": {
          "total": 669,
          "Employee": 544,
          "Contractor": 125
        }
      }
    },
    {
      "date": "2025-07-19",
      "day": "Saturday",
      "region": {
        "name": "APAC",
        "total": 180,
        "Employee": 103,
        "Contractor": 77
      },
      "partitions": {
        "undefined": {
          "total": 180,
          "Employee": 103,
          "Contractor": 77
        }
      }
    },
    {
      "date": "2025-07-20",
      "day": "Sunday",
      "region": {
        "name": "APAC",
        "total": 133,
        "Employee": 55,
        "Contractor": 78
      },
      "partitions": {
        "undefined": {
          "total": 133,
          "Employee": 55,
          "Contractor": 78
        }
      }
    },
    {
      "date": "2025-07-21",
      "day": "Monday",
      "region": {
        "name": "APAC",
        "total": 923,
        "Employee": 807,
        "Contractor": 116
      },
      "partitions": {
        "undefined": {
          "total": 923,
          "Employee": 807,
          "Contractor": 116
        }
      }
    }
  ],
  "details": [
    {
      "LocaleMessageTime": "2025-07-14T00:00:10.000Z",
      "ObjectName1": "Castillo, Mary Jane Jimenez",
      "Door": "APAC_PH_Manila_7th Floor_Recption Door 2-701",
      "EmployeeID": "303302",
      "PersonnelType": "Employee",
      "PersonGUID": "E0530ECA-F13E-4C83-8177-C42515CF1620",
      "PartitionNameFriendly": "Quezon City",
      "CardNumber": "609927",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-07-14T00:00:50.000Z",
      "ObjectName1": "Jutar, Rizza Gentil",
      "Door": "APAC_PH_Manila_7th Floor_Recption Door 1-701",
      "EmployeeID": "314594",
      "PersonnelType": "Employee",
      "PersonGUID": "2D25EC7B-0AC3-4BB5-80BA-EE668914A278",
      "PartitionNameFriendly": "Quezon City",
      "CardNumber": "418760",
      "Direction": "OutDirection"
    },
    {
      "LocaleMessageTime": "2025-07-14T00:01:34.000Z",
      "ObjectName1": "India, TEMP_PUN_001",
      "Door": "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)",
      "EmployeeID": "",
      "PersonnelType": "Temp Badge",
      "PersonGUID": "1E3639F4-4F63-459E-95CB-4F08CCB4742E",
      "PartitionNameFriendly": "Pune",
      "CardNumber": "411101",
      "Direction": "InDirection"
    },
    {












//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\services\occupancy.service.js
// src/services/occupancy.service.js
const { poolPromise, sql } = require('../config/db');

const partitionList = [
  'APAC.Default',
  'CN.Beijing',
  'JP.Tokyo',
  'PH.Manila',
  'MY.Kuala Lumpur',
  'IN.Pune'
];

function quoteList(arr) {
  return arr.map(p => `'${p.replace("'", "''")}'`).join(',');
}

/**
 * Live occupancy (today) for APAC
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
    WITH CombinedEmployeeData AS (
      SELECT
        t1.ObjectName1,
        t1.ObjectName2             AS Door,               -- include Door
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                    AS PersonnelType,
        t1.ObjectIdentity1         AS PersonGUID,
        -- extract CardNumber from XML or shred table
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                          AS CardNumber,
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%'   THEN 'Pune'
          WHEN t1.ObjectName2 LIKE 'APAC_JPN%' THEN 'JP.Tokyo'
          WHEN t1.ObjectName2 LIKE 'APAC_MY%'  THEN 'MY.Kuala Lumpur'
          ELSE t1.PartitionName2
        END                        AS PartitionName2,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t5d.value                  AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${parts})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    ), Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (PARTITION BY PersonGUID ORDER BY LocaleMessageTime DESC) AS rn
      FROM CombinedEmployeeData
    )
    SELECT
      ObjectName1,
      Door,                            -- door
      PersonnelType,
      EmployeeID,
      CardNumber,                      -- now returned
      PartitionName2,
      LocaleMessageTime,
      Direction,
      PersonGUID
    FROM Ranked
    WHERE rn = 1;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};




/**
 * Historical raw‐data fetch for the past N days, all or by location.
 */


exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  // Outer‐query filter based on the alias
  const outerFilter = location
    ? `WHERE PartitionNameFriendly = @location`
    : `WHERE PartitionNameFriendly IN (${quoteList([
        'Pune','Quezon City','JP.Tokyo','MY.Kuala Lumpur','Taguig City'
      ])})`;

  const query = `
    WITH Hist AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2               AS Door,
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                      AS PersonnelType,
        t1.ObjectIdentity1           AS PersonGUID,

        -- 1) Remap raw PartitionName2 into the friendly PartitionNameFriendly
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%'   THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%'   THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%'      THEN 'Pune'
          WHEN t1.ObjectName2 LIKE 'APAC_JPN%'  THEN 'JP.Tokyo'
          WHEN t1.ObjectName2 LIKE 'APAC_MY%'   THEN 'MY.Kuala Lumpur'
          ELSE t1.PartitionName2
        END                           AS PartitionNameFriendly,

        -- extract CardNumber
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                            AS CardNumber,
        t5d.value                    AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        -- date filter remains here
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
    )

    -- now filter by the newly‐defined alias
    SELECT *
    FROM Hist
    ${outerFilter}
    ORDER BY LocaleMessageTime ASC;
  `;

  const req = pool.request();
  if (location) {
    req.input('location', sql.NVarChar, location);
  }
  const result = await req.query(query);
  return result.recordset;
};


exports.fetchHistoricalOccupancy = async (location) =>
  exports.fetchHistoricalData({ days: 7, location: location || null });

